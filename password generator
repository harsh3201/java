import java.security.SecureRandom;  
import java.util.Collections;  
import java.util.List;  
import java.util.Random;  
import java.util.stream.Collectors;  
import java.util.stream.IntStream;  
import java.util.stream.Stream;  
public class pass {   
    public static void main(String args[]) {  

        String pass = generateSecurePassword();  

        System.out.println("Password generated by Custom Utility Method is:"+pass);  
          
    }  
    public static String generateSecurePassword() {  
          
         Stream<Character> demoPassword = Stream.concat(getRandomNumbers(2),   
                 Stream.concat(getRandomSpecialChars(2),   
                         Stream.concat(getRandomAlphabets(2, true), getRandomAlphabets(2, false))));  
           
        List<Character> listOfChar = demoPassword.collect(Collectors.toList());  
          
        // for shuffle 
        Collections.shuffle(listOfChar);  
          
        
        String password = listOfChar.stream()  
                .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)  
                .toString();  
                  
        
        return password;  
    }  
    // special char
    public static Stream<Character> getRandomSpecialChars(int length) {  
          
        Stream<Character> specialCharsStream;   
        Random random = new SecureRandom();  
          
        // special char
        IntStream specialChars = random.ints(length, 33, 45);  
        specialCharsStream =  specialChars.mapToObj(data -> (char) data);  
          
        // 
        return specialCharsStream;  
    }  
      
    // random number 
    public static Stream<Character> getRandomNumbers(int length) {  
          
        Stream<Character> numberStream;  
          
        // create instance of SecureRandom  
        Random random = new SecureRandom();  
          
        // use ints() for number
        IntStream numberIntStream = random.ints(length, 48, 57);  
        numberStream = numberIntStream.mapToObj(data -> (char) data);  
          
        // return number stream 
        return numberStream;  
    }  
      
    // create getRandomAlphabets() 
    public static Stream<Character> getRandomAlphabets(int length, boolean check) {  
          
        Stream<Character> lowerUpperStream;  
        //lower case
        if(check == true) {  
            Random random = new SecureRandom();  
              
            IntStream lCaseStream = random.ints(length, 'a', 'z');  
            lowerUpperStream =  lCaseStream.mapToObj(data -> (char) data);  
        }  
        // uper case  
        else {  
            Random random = new SecureRandom();  
              
            IntStream uCaseStream = random.ints(length, 'A', 'Z');  
            lowerUpperStream =  uCaseStream.mapToObj(data -> (char) data);  
        }    
        return lowerUpperStream;  
    }  
      
} 
